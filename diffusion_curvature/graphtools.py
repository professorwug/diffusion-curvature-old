# AUTOGENERATED! DO NOT EDIT! File to edit: ../Core (graphtools).ipynb.

# %% auto 0
__all__ = ['DiffusionCurvature']

# %% ../Core (graphtools).ipynb 9
from fastcore.all import *
import graphtools
class DiffusionCurvature():
    def __init__(self, 
    t:int, # Number of diffusion steps to use when measuring curvature. TODO: Heuristics
    distance_type = "PHATE",
    **kwargs):
        store_attr()

# %% ../Core (graphtools).ipynb 11
import numpy as np
import graphtools
import math
import scipy
@patch
def power_diffusion_matrix(self:DiffusionCurvature, G:graphtools.api.Graph, t=None):
    # Raises the diffusion matrix of G to t and stores the result in G.Pt
    if not t:
        t = self.t
    if type(G.P) == np.ndarray:
        G.Pt = np.linalg.matrix_power(G.P, t)
    elif type(G.P) == scipy.sparse.csr_matrix:
        G.Pt = G.P ** t
    else:
        raise NotImplementedError("Unknown Matrix Type")
    return G

# %% ../Core (graphtools).ipynb 15
from .distances import *
@patch
def distances(self:DiffusionCurvature, G):
    match self.distance_type:
        case "PHATE":
            G = phate_distances(G)
        case _:
            raise NotImplementedError(f"No distance with name {self.distance_type}")
